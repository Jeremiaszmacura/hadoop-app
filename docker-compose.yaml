version: '3.8'

services:

  mongodb:
    image: mongo
    restart: always
    env_file: .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: user
    volumes:
      - ./mongo-data:/data/db
    networks:
      - flask-hadoop-app-network

  mongo-express:
    image: mongo-express:latest
    container_name: hadoop-app-mongo-express
    restart: unless-stopped
    ports:
      - 8081:8081
    env_file: .env
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_URL: "mongodb://user:user@mongodb"
      ME_CONFIG_OPTIONS_EDITORTHEME: "dracula"
    command: /bin/sh -c "sleep 15 && tini -- /docker-entrypoint.sh"
    networks:
      - flask-hadoop-app-network

  flask-hadoop-app:
    image: flask-hadoop-app
    container_name: flask-hadoop-app
    build:
      context: .
      dockerfile: ./app.Dockerfile
    ports:
      - 5000:5000
    environment:
      FLASK_DEBUG: 'True'
      DATABASE_URI: ${DEV_DATABASE_URI}
      BACKUP_DATABASE_URI: ${BACKUP_DATABASE_URI}
    networks:
      - flask-hadoop-app-network
    restart: on-failure

  hadoop-app:
    image: hadoop-app
    container_name: hadoop-app
    build:
      context: .
      dockerfile: ./hadoop.Dockerfile
    ports:
      - 8088:8088
    networks:
      - flask-hadoop-app-network
    restart: on-failure

  ngrok:
    container_name: ngrok
    image: ngrok/ngrok
    ports:
      - "4040:4040"
    networks:
      - flask-hadoop-app-network
    env_file: .env
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    command: ["http", "flask-hadoop-app:5000"]

networks:
    flask-hadoop-app-network:
      driver: bridge
      name: flask-hadoop-app-network